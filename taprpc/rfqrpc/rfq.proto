syntax = "proto3";

package rfqrpc;

option go_package = "github.com/lightninglabs/taproot-assets/taprpc/rfqrpc";

service Rfq {
    /* tapcli: `rfq buyorder`
    UpsertAssetBuyOrder is used to upsert a buy order for a specific asset.
    */
    rpc UpsertAssetBuyOrder (UpsertAssetBuyOrderRequest)
        returns (UpsertAssetBuyOrderResponse);

    /* tapcli: `rfq selloffer`
    UpsertAssetSellOrder is used to upsert a sell offer for a specific asset.
     */
    rpc UpsertAssetSellOffer (UpsertAssetSellOfferRequest)
        returns (UpsertAssetSellOfferResponse);

    /* tapcli: `rfq acceptedquotes`
    QueryRfqAcceptedQuotes is used to upsert a sell order for a specific
    asset.
     */
    rpc QueryRfqAcceptedQuotes (QueryRfqAcceptedQuotesRequest)
        returns (QueryRfqAcceptedQuotesResponse);

    rpc SubscribeRfqEventNtfns (SubscribeRfqEventNtfnsRequest)
        returns (stream RfqEvent);
}

message AssetSpecifier {
    oneof id {
        // The 32-byte asset ID specified as raw bytes (gRPC only).
        bytes asset_id = 1;

        // The 32-byte asset ID encoded as a hex string (use this for REST).
        string asset_id_str = 2;

        // The 32-byte asset group key specified as raw bytes (gRPC only).
        bytes group_key = 3;

        // The 32-byte asset group key encoded as hex string (use this for
        // REST).
        string group_key_str = 4;
    }
}

message UpsertAssetBuyOrderRequest {
    // asset_specifier is the subject asset.
    AssetSpecifier asset_specifier = 1;

    // The minimum amount of the asset to buy.
    uint64 min_asset_amount = 2;

    // The maximum amount BTC to spend (units: millisats).
    uint64 max_bid = 3;

    // The unix timestamp after which the order is no longer valid.
    uint64 expiry = 4;

    // peer is an optional field that can be used to specify the peer to
    // send the order to.
    bytes peer = 5;
}

message UpsertAssetBuyOrderResponse {
}

message UpsertAssetSellOfferRequest {
    // asset_specifier is the subject asset.
    AssetSpecifier asset_specifier = 1;

    // max_units is the maximum amount of the asset to sell.
    uint64 max_units = 2;
}

message UpsertAssetSellOfferResponse {
}

message QueryRfqAcceptedQuotesRequest {
}

message AcceptedQuote {
    // Quote counterparty peer.
    string peer = 1;

    // The unique identifier of the quote request.
    bytes id = 2;

    // scid is the short channel ID of the channel over which the payment for
    // the quote should be made.
    uint64 scid = 3;

    // asset_amount is the amount of the subject asset.
    uint64 asset_amount = 4;

    // ask_price is the price in millisats for the entire asset amount.
    uint64 ask_price = 5;

    // The unix timestamp after which the quote is no longer valid.
    uint64 expiry = 6;
}

message QueryRfqAcceptedQuotesResponse {
    repeated AcceptedQuote accepted_quotes = 1;
}

message IncomingAcceptQuoteEvent {
    // Unix timestamp.
    uint64 timestamp = 1;

    // The accepted quote.
    AcceptedQuote accepted_quote = 2;
}

message SubscribeRfqEventNtfnsRequest {
}

message RfqEvent {
    oneof event {
        // incoming_accept_quote is an event that is sent when an incoming
        // accept quote message is received.
        IncomingAcceptQuoteEvent incoming_accept_quote = 1;
    }
}
