// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rfqrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RfqClient is the client API for Rfq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RfqClient interface {
	// tapcli: `rfq buyorder`
	// UpsertAssetBuyOrder is used to upsert a buy order for a specific asset.
	UpsertAssetBuyOrder(ctx context.Context, in *UpsertAssetBuyOrderRequest, opts ...grpc.CallOption) (*UpsertAssetBuyOrderResponse, error)
	// tapcli: `rfq selloffer`
	// UpsertAssetSellOrder is used to upsert a sell offer for a specific asset.
	UpsertAssetSellOffer(ctx context.Context, in *UpsertAssetSellOfferRequest, opts ...grpc.CallOption) (*UpsertAssetSellOfferResponse, error)
	// tapcli: `rfq acceptedquotes`
	// QueryRfqAcceptedQuotes is used to upsert a sell order for a specific
	// asset.
	QueryRfqAcceptedQuotes(ctx context.Context, in *QueryRfqAcceptedQuotesRequest, opts ...grpc.CallOption) (*QueryRfqAcceptedQuotesResponse, error)
	// SubscribeRfqEventNtfns is used to subscribe to RFQ events.
	SubscribeRfqEventNtfns(ctx context.Context, in *SubscribeRfqEventNtfnsRequest, opts ...grpc.CallOption) (Rfq_SubscribeRfqEventNtfnsClient, error)
}

type rfqClient struct {
	cc grpc.ClientConnInterface
}

func NewRfqClient(cc grpc.ClientConnInterface) RfqClient {
	return &rfqClient{cc}
}

func (c *rfqClient) UpsertAssetBuyOrder(ctx context.Context, in *UpsertAssetBuyOrderRequest, opts ...grpc.CallOption) (*UpsertAssetBuyOrderResponse, error) {
	out := new(UpsertAssetBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/UpsertAssetBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) UpsertAssetSellOffer(ctx context.Context, in *UpsertAssetSellOfferRequest, opts ...grpc.CallOption) (*UpsertAssetSellOfferResponse, error) {
	out := new(UpsertAssetSellOfferResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/UpsertAssetSellOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) QueryRfqAcceptedQuotes(ctx context.Context, in *QueryRfqAcceptedQuotesRequest, opts ...grpc.CallOption) (*QueryRfqAcceptedQuotesResponse, error) {
	out := new(QueryRfqAcceptedQuotesResponse)
	err := c.cc.Invoke(ctx, "/rfqrpc.Rfq/QueryRfqAcceptedQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfqClient) SubscribeRfqEventNtfns(ctx context.Context, in *SubscribeRfqEventNtfnsRequest, opts ...grpc.CallOption) (Rfq_SubscribeRfqEventNtfnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rfq_ServiceDesc.Streams[0], "/rfqrpc.Rfq/SubscribeRfqEventNtfns", opts...)
	if err != nil {
		return nil, err
	}
	x := &rfqSubscribeRfqEventNtfnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rfq_SubscribeRfqEventNtfnsClient interface {
	Recv() (*RfqEvent, error)
	grpc.ClientStream
}

type rfqSubscribeRfqEventNtfnsClient struct {
	grpc.ClientStream
}

func (x *rfqSubscribeRfqEventNtfnsClient) Recv() (*RfqEvent, error) {
	m := new(RfqEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RfqServer is the server API for Rfq service.
// All implementations must embed UnimplementedRfqServer
// for forward compatibility
type RfqServer interface {
	// tapcli: `rfq buyorder`
	// UpsertAssetBuyOrder is used to upsert a buy order for a specific asset.
	UpsertAssetBuyOrder(context.Context, *UpsertAssetBuyOrderRequest) (*UpsertAssetBuyOrderResponse, error)
	// tapcli: `rfq selloffer`
	// UpsertAssetSellOrder is used to upsert a sell offer for a specific asset.
	UpsertAssetSellOffer(context.Context, *UpsertAssetSellOfferRequest) (*UpsertAssetSellOfferResponse, error)
	// tapcli: `rfq acceptedquotes`
	// QueryRfqAcceptedQuotes is used to upsert a sell order for a specific
	// asset.
	QueryRfqAcceptedQuotes(context.Context, *QueryRfqAcceptedQuotesRequest) (*QueryRfqAcceptedQuotesResponse, error)
	// SubscribeRfqEventNtfns is used to subscribe to RFQ events.
	SubscribeRfqEventNtfns(*SubscribeRfqEventNtfnsRequest, Rfq_SubscribeRfqEventNtfnsServer) error
	mustEmbedUnimplementedRfqServer()
}

// UnimplementedRfqServer must be embedded to have forward compatible implementations.
type UnimplementedRfqServer struct {
}

func (UnimplementedRfqServer) UpsertAssetBuyOrder(context.Context, *UpsertAssetBuyOrderRequest) (*UpsertAssetBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAssetBuyOrder not implemented")
}
func (UnimplementedRfqServer) UpsertAssetSellOffer(context.Context, *UpsertAssetSellOfferRequest) (*UpsertAssetSellOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAssetSellOffer not implemented")
}
func (UnimplementedRfqServer) QueryRfqAcceptedQuotes(context.Context, *QueryRfqAcceptedQuotesRequest) (*QueryRfqAcceptedQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRfqAcceptedQuotes not implemented")
}
func (UnimplementedRfqServer) SubscribeRfqEventNtfns(*SubscribeRfqEventNtfnsRequest, Rfq_SubscribeRfqEventNtfnsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRfqEventNtfns not implemented")
}
func (UnimplementedRfqServer) mustEmbedUnimplementedRfqServer() {}

// UnsafeRfqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RfqServer will
// result in compilation errors.
type UnsafeRfqServer interface {
	mustEmbedUnimplementedRfqServer()
}

func RegisterRfqServer(s grpc.ServiceRegistrar, srv RfqServer) {
	s.RegisterService(&Rfq_ServiceDesc, srv)
}

func _Rfq_UpsertAssetBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssetBuyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).UpsertAssetBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/UpsertAssetBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).UpsertAssetBuyOrder(ctx, req.(*UpsertAssetBuyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_UpsertAssetSellOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssetSellOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).UpsertAssetSellOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/UpsertAssetSellOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).UpsertAssetSellOffer(ctx, req.(*UpsertAssetSellOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_QueryRfqAcceptedQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRfqAcceptedQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfqServer).QueryRfqAcceptedQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rfqrpc.Rfq/QueryRfqAcceptedQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfqServer).QueryRfqAcceptedQuotes(ctx, req.(*QueryRfqAcceptedQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfq_SubscribeRfqEventNtfns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRfqEventNtfnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RfqServer).SubscribeRfqEventNtfns(m, &rfqSubscribeRfqEventNtfnsServer{stream})
}

type Rfq_SubscribeRfqEventNtfnsServer interface {
	Send(*RfqEvent) error
	grpc.ServerStream
}

type rfqSubscribeRfqEventNtfnsServer struct {
	grpc.ServerStream
}

func (x *rfqSubscribeRfqEventNtfnsServer) Send(m *RfqEvent) error {
	return x.ServerStream.SendMsg(m)
}

// Rfq_ServiceDesc is the grpc.ServiceDesc for Rfq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rfq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rfqrpc.Rfq",
	HandlerType: (*RfqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertAssetBuyOrder",
			Handler:    _Rfq_UpsertAssetBuyOrder_Handler,
		},
		{
			MethodName: "UpsertAssetSellOffer",
			Handler:    _Rfq_UpsertAssetSellOffer_Handler,
		},
		{
			MethodName: "QueryRfqAcceptedQuotes",
			Handler:    _Rfq_QueryRfqAcceptedQuotes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRfqEventNtfns",
			Handler:       _Rfq_SubscribeRfqEventNtfns_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rfqrpc/rfq.proto",
}
